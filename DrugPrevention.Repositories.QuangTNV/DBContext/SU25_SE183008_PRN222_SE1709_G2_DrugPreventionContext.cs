// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using DrugPrevention.Repositories.QuangTNV.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace DrugPrevention.Repositories.QuangTNV.DBContext;

public partial class SU25_SE183008_PRN222_SE1709_G2_DrugPreventionContext : DbContext
{
    public SU25_SE183008_PRN222_SE1709_G2_DrugPreventionContext()
    {
    }

    public SU25_SE183008_PRN222_SE1709_G2_DrugPreventionContext(DbContextOptions<SU25_SE183008_PRN222_SE1709_G2_DrugPreventionContext> options)
        : base(options)
    {
    }    public virtual DbSet<CoursesQuangTnv> CoursesQuangTnvs { get; set; }

    public virtual DbSet<SystemUserAccount> SystemUserAccounts { get; set; }

    public virtual DbSet<UserCoursesQuangTnv> UserCoursesQuangTnvs { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CoursesQuangTnv>(entity =>
        {
            entity.HasKey(e => e.CourseIdquangTnv).HasName("PK__Courses__C92D7187800F876D");

            entity.ToTable("CoursesQuangTNV");

            entity.HasIndex(e => e.AgeGroup, "IDX_Courses_AgeGroup");

            entity.HasIndex(e => e.Category, "IDX_Courses_Category");

            entity.HasIndex(e => e.IsActive, "IDX_Courses_IsActive");

            entity.Property(e => e.CourseIdquangTnv).HasColumnName("CourseIDQuangTNV");
            entity.Property(e => e.AgeGroup)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ContentUrl)
                .HasMaxLength(255)
                .HasColumnName("ContentURL");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasColumnType("ntext");
            entity.Property(e => e.DifficultyLevel).HasMaxLength(20);
            entity.Property(e => e.InstructorName).HasMaxLength(100);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.LearningObjectives).HasColumnType("ntext");
            entity.Property(e => e.Rating)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(3, 2)");
            entity.Property(e => e.ThumbnailUrl)
                .HasMaxLength(255)
                .HasColumnName("ThumbnailURL");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.ViewCount).HasDefaultValue(0);
        });

        modelBuilder.Entity<SystemUserAccount>(entity =>
        {
            entity.HasKey(e => e.UserAccountId);

            entity.ToTable("System.UserAccount");

            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.ApplicationCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.EmployeeCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RequestCode).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<UserCoursesQuangTnv>(entity =>
        {
            entity.HasKey(e => e.UserCourseIdquangTnv).HasName("PK__UserCour__58886EF4CB2BAC23");

            entity.ToTable("UserCoursesQuangTNV");

            entity.HasIndex(e => new { e.UserId, e.CourseId }, "UC_UserCourses").IsUnique();

            entity.Property(e => e.UserCourseIdquangTnv).HasColumnName("UserCourseIDQuangTNV");
            entity.Property(e => e.CertificateIssued).HasDefaultValue(false);
            entity.Property(e => e.CertificateUrl)
                .HasMaxLength(255)
                .HasColumnName("CertificateURL");
            entity.Property(e => e.CompletionDate).HasColumnType("datetime");
            entity.Property(e => e.CourseId).HasColumnName("CourseID");
            entity.Property(e => e.EnrollmentDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Feedback).HasColumnType("ntext");
            entity.Property(e => e.LastAccessDate).HasColumnType("datetime");
            entity.Property(e => e.Progress)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Course).WithMany(p => p.UserCoursesQuangTnvs)
                .HasForeignKey(d => d.CourseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UserCours__Cours__6E01572D");

            entity.HasOne(d => d.User).WithMany(p => p.UserCoursesQuangTnvs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserCoursesQuangTNV_System.UserAccount");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}